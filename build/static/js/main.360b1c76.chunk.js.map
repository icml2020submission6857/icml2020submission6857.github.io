{"version":3,"sources":["results sync /^/.//.*/.json$","components/EnvsDropdown.js","components/ChartCanvas.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","EnvsDropdown","colorPattern","React","Component","Footer","App","useState","mainRef","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"09LAAA,IAAIA,EAAM,CACT,0CAA2C,GAC3C,0CAA2C,GAC3C,0CAA2C,GAC3C,qCAAsC,GACtC,uCAAwC,GACxC,uCAAwC,GACxC,uCAAwC,GACxC,0CAA2C,GAC3C,0CAA2C,GAC3C,0CAA2C,GAC3C,oCAAqC,GACrC,oCAAqC,GACrC,oCAAqC,GACrC,qCAAsC,GACtC,qCAAsC,GACtC,qCAAsC,GACtC,oCAAqC,GACrC,oCAAqC,GACrC,oCAAqC,GACrC,wCAAyC,GACzC,wCAAyC,GACzC,wCAAyC,GACzC,qCAAsC,GACtC,qCAAsC,GACtC,qCAAsC,GACtC,gBAAiB,GAIlB,SAASC,EAAeC,GACvB,IAAIC,EAAKC,EAAsBF,GAC/B,OAAOG,EAAoBF,GAE5B,SAASC,EAAsBF,GAC9B,IAAIG,EAAoBC,EAAEN,EAAKE,GAAM,CACpC,IAAIK,EAAI,IAAIC,MAAM,uBAAyBN,EAAM,KAEjD,MADAK,EAAEE,KAAO,mBACHF,EAEP,OAAOP,EAAIE,GAEZD,EAAeS,KAAO,WACrB,OAAOC,OAAOD,KAAKV,IAEpBC,EAAeW,QAAUR,EACzBS,EAAOC,QAAUb,EACjBA,EAAeE,GAAK,I,0msSCNLY,I,6DCpCTC,G,MAAe,CACjB,qBACA,oBACA,oBACA,oBACA,qBACA,oBACA,mBACA,oBACA,qBACA,qBACA,sBAiBsBC,IAAMC,U,MCPjBC,I,OC6BAC,MA5Cf,WAAgB,IAAD,EACyBC,mBAAS,GADlC,mBAIX,OAJW,UAGUC,EAAO,UAExB,6BAkBI,yBAAKC,UAAU,OACX,wBAAIA,UAAU,2BAAd,+EACA,krCCxBIC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.360b1c76.chunk.js","sourcesContent":["var map = {\n\t\"./MAMLTRPO_garage_HalfCheetahVel_0.json\": 27,\n\t\"./MAMLTRPO_garage_HalfCheetahVel_1.json\": 28,\n\t\"./MAMLTRPO_garage_HalfCheetahVel_2.json\": 29,\n\t\"./MTPPO_garage_ML1-reach-v1_0.json\": 30,\n\t\"./PEARL_garage_HalfCheetahVel_0.json\": 31,\n\t\"./PEARL_garage_HalfCheetahVel_1.json\": 32,\n\t\"./PEARL_garage_HalfCheetahVel_2.json\": 33,\n\t\"./PEARL_garage_ML1-pick-place-v1_0.json\": 34,\n\t\"./PEARL_garage_ML1-pick-place-v1_1.json\": 35,\n\t\"./PEARL_garage_ML1-pick-place-v1_2.json\": 36,\n\t\"./PEARL_garage_ML1-push-v1_0.json\": 37,\n\t\"./PEARL_garage_ML1-push-v1_1.json\": 38,\n\t\"./PEARL_garage_ML1-push-v1_2.json\": 39,\n\t\"./PEARL_garage_ML1-reach-v1_0.json\": 40,\n\t\"./PEARL_garage_ML1-reach-v1_1.json\": 41,\n\t\"./PEARL_garage_ML1-reach-v1_2.json\": 42,\n\t\"./RL2PPO_ProMP_ML1-push-v1_0.json\": 43,\n\t\"./RL2PPO_ProMP_ML1-push-v1_1.json\": 44,\n\t\"./RL2PPO_ProMP_ML1-push-v1_2.json\": 45,\n\t\"./RL2PPO_garage_HalfCheetahVel_0.json\": 46,\n\t\"./RL2PPO_garage_HalfCheetahVel_1.json\": 47,\n\t\"./RL2PPO_garage_HalfCheetahVel_2.json\": 48,\n\t\"./RL2PPO_garage_ML1-push-v1_0.json\": 49,\n\t\"./RL2PPO_garage_ML1-push-v1_1.json\": 50,\n\t\"./RL2PPO_garage_ML1-push-v1_2.json\": 51,\n\t\"./result.json\": 3\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 26;","import React, { useState } from 'react';\n\nimport './EnvsDropdown.css'\n\nfunction EnvsDropdown(props) {\n    let envs = props.envs;\n    let currentEnv = props.currentEnv;\n    let setCurrentEnv = props.setCurrentEnv;\n    const [envsDropdownActive, setEnvsDropdown] = useState(false);\n\n    return (\n        <div className={\"dropdown\" + ((envsDropdownActive === true) ? \" is-active\": \"\")}>\n            <div className=\"dropdown-trigger\">\n                <button className=\"button dropdown-button\" aria-haspopup=\"true\" aria-controls=\"dropdown-menu\"\n                        onClick={() => { setEnvsDropdown(!envsDropdownActive) }}>\n                    <span>{currentEnv}</span>\n                    <span className=\"icon is-small\">\n                        <i className=\"fas fa-angle-down\" aria-hidden=\"true\"/>\n                    </span>\n                </button>\n            </div>\n            <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n                <div className=\"dropdown-content\">\n                    {envs.map((item, index) => {\n                        return(\n                            <button className=\"dropdown-item button is-white\"\n                                    key={item}\n                                    onClick={() => {\n                                        setEnvsDropdown(false);\n                                        setCurrentEnv(item);\n                                    }}\n                            >{item}\n                            </button>\n                        );\n                    })}\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default EnvsDropdown;\n","import React from \"react\";\nimport Chart from \"chart.js\"\n\nimport './ChartCanvas.css'\n\nconst colorPattern = [\n    'rgb(103, 153, 213)',\n    'rgb(217, 122, 73)',\n    'rgb(79, 166, 124)',\n    'rgb(219, 87, 124)',\n    'rgb(140, 100, 201)',\n    'rgb(75, 162, 178)',\n    'rgb(83, 98, 235)',\n    'rgb(176, 70, 154)',\n    'rgb(113, 135, 146)',\n    'rgb(222, 112, 108)',\n    'rgb(60, 100, 147)',\n];\n\nconst colorPattern_bg = [\n    'rgba(103, 153, 213, .3)',\n    'rgba(217, 122, 73, .3)',\n    'rgba(79, 166, 124, .3)',\n    'rgba(219, 87, 124, .3)',\n    'rgba(140, 100, 201, .3)',\n    'rgba(75, 162, 178, .3)',\n    'rgba(83, 98, 235, .3)',\n    'rgba(176, 70, 154, .3)',\n    'rgba(113, 135, 146, .3)',\n    'rgba(222, 112, 108, .3)',\n    'rgba(60, 100, 147, .3)',\n];\n\nclass ChartCanvas extends React.Component {\n    constructor(props) {\n        super(props);\n        this.runs = this.props.runs;\n        console.log(this.runs);\n    }\n\n    componentDidMount() {\n        this.updateChart();\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        this.updateChart();\n    }\n\n    updateChart() {\n        if (this.chart) {\n            this.chart.destroy();\n        }\n\n        let datasets = this.runs.map((run, index) => {\n            let indices = [...Array(run['data']['x'].length).keys()];\n            let data = indices.map(i => { return {\n                x: run['data']['x'][i],\n                y: run['data']['y'][i],\n            } });\n\n            return ({\n                label: run['algo'],\n                fill: false,\n                data: data,\n                borderColor: colorPattern[index],\n                pointRadius: 0.8,\n                pointBackgroundColor: colorPattern[index],\n                borderWidth: 0.8,\n                showLine: true\n            });\n        });\n\n        // let datasets_up = this.runs.map((run, index) => {\n        //     let indices = [...Array(run['data']['x'].length).keys()];\n        //     let data = indices.map(i => { return {\n        //         x: run['data']['x'][i],\n        //         y: run['data']['y'][i]+20000,\n        //     } });\n        //\n        //     return ({\n        //         label: run['algo']+ 'up',\n        //         fill: 0,\n        //         data: data,\n        //         borderColor: 'transparent',\n        //         backgroundColor: colorPattern_bg[index],\n        //         pointRadius: 0,\n        //         showLine: true\n        //     });\n        // });\n        //\n        // datasets = datasets.concat(datasets_up);\n\n        console.log(datasets);\n\n        this.chart = new Chart(this.myCanvas, {\n            type: 'scatter',\n            data: {\n                datasets: datasets\n            },\n            options: {\n                scales: {\n                    xAxes: [{\n                        scaleLabel: {\n                            display: true,\n                            labelString: this.runs[0]['x_name']\n                        }\n                    }],\n                    yAxes: [{\n                        scaleLabel: {\n                            display: true,\n                            labelString: this.runs[0]['y_name']\n                        }\n                    }],\n                },\n                tooltips: {\n                    mode: 'label'\n                },\n                legend: {\n                    onHover: function(e) {\n                        e.target.style.cursor = 'pointer';\n                    }\n                },\n                hover: {\n                    onHover: function(e) {\n                        var point = this.getElementAtEvent(e);\n                        if (point.length) e.target.style.cursor = 'pointer';\n                        else e.target.style.cursor = 'default';\n                    }\n                }\n            }\n        });\n    }\n\n    render() {\n        return(\n            <div className=\"canvas-section\">\n                <canvas ref={node =>{this.myCanvas=node}} id=\"canvas-chart\" />\n            </div>\n        );\n    }\n}\n\nexport default ChartCanvas;\n","import React from 'react';\n\nimport 'bulma/css/bulma.min.css'\nimport './Footer.css'\n\nfunction Footer() {\n    return (\n        <footer className=\"footer\">\n            <div className=\"footer-content has-text-centered\">\n                {/*<a className=\"footer-item\" href=\"/\"*/}\n                {/*   target=\"_blank\" rel=\"noopener noreferrer\">*/}\n                {/*    <i className=\"fas fa-file-alt\"/> Paper*/}\n                {/*</a>*/}\n                {/*<a className=\"footer-item\" href=\"https://github.com/rlworkgroup/garage\"*/}\n                {/*   target=\"_blank\" rel=\"noopener noreferrer\">*/}\n                {/*    <i className=\"fab fa-github\"/> Github*/}\n                {/*</a>*/}\n                {/*<a className=\"footer-item\" href=\"https://garage.readthedocs.org/en/latest/\"*/}\n                {/*   target=\"_blank\" rel=\"noopener noreferrer\">*/}\n                {/*    <i className=\"fas fa-book\"/> Documentation*/}\n                {/*</a>*/}\n            </div>\n        </footer>\n    );\n}\n\nexport default Footer;\n","import React, { useState } from 'react';\n\nimport 'bulma/css/bulma.min.css'\nimport './App.css'\n\nimport Hero from \"./components/Hero\";\nimport Dashboard from \"./components/Dashboard\";\nimport Footer from \"./components/Footer\";\n\nimport mainRef from './results/result.json'\n\nfunction App() {\n    const [currentTab, setCurrentTab] = useState(1);\n    //let commitHash = jsonData['githash'].substring(0, 7);\n    let lastUpdateTime = mainRef['timestamp'];\n    return (\n        <div>\n            {/*<Hero lastUpdateTime={lastUpdateTime} />*/}\n            {/*<div className=\"tabs is-centered\">*/}\n            {/*    <ul>*/}\n            {/*        <li className={(currentTab===1) ? \"is-active\": \"\"}>*/}\n            {/*            <a href=\"/\" key={1} onClick={(e)=> {*/}\n            {/*            e.preventDefault();*/}\n            {/*            setCurrentTab(1);*/}\n            {/*        }}>1</a></li>*/}\n            {/*        <li className={(currentTab===2) ? \"is-active\": \"\"}>*/}\n            {/*            <a href=\"/\" key={2} onClick={(e)=> {*/}\n            {/*                e.preventDefault();*/}\n            {/*                setCurrentTab(2);*/}\n            {/*            }}>2</a></li>*/}\n            {/*    </ul>*/}\n            {/*</div>*/}\n            {/*{(currentTab === 1) ? <Dashboard mainRef={mainRef} /> : null}*/}\n            {/*<Footer />*/}\n            <div className=\"box\">\n                <h1 className=\"title has-text-centered\">Demystifying Reproducibility in Meta- and Multi-Task Reinforcement Learning</h1>\n                <p>Establishing the significance of experimental results in reinforcement learning (RL) is difficult.\n                    This is compounded by the additional complexity of meta- and multi-task RL, a rapidly-growing\n                    research area which lacks well-defined baselines. We analyze several design decisions each author\n                    must make when they implement a meta-RL or MTRL algorithm, and show that these seemingly-small\n                    details can create variations in a single algorithm's performance that exceed the reported\n                    performance differences between algorithms themselves. Informed by this analysis, we precisely\n                    define several important hyperparameters, design decisions, and evaluation metrics for meta-RL\n                    and MTRL methods, so that we can compare these methods reproducibly. We then provide multi-seed\n                    benchmark results for seven of the most popular meta-RL and MTRL algorithms on the most challenging\n                    benchmarks currently available. Finally, we share with the community an open source package of these\n                    algorithm reference implementations, which use our consistent definitions, achieve\n                    state-of-the-art-performance, and seeks to follow the original works introducing these algorithms\n                    as closely as possible.\n                </p>\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}